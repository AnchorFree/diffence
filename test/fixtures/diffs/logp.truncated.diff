6f41b9b0a8150e165cd297ae3e00129766cf8a9b Splits Results into separate file
diff --git a/README.md b/README.md
index fc64cd8..2a21457 100644
--- a/README.md
+++ b/README.md
@@ -1,7 +1,8 @@
 # diffence
 
-Checks a git diff for offensive content.
-Golang 1.7+
+- Checks a git diff for offensive content.
+- Golang 1.7+
+- [Documentation on GoDoc](https://godoc.org/github.com/techjacker/diffence).
 
 -----------------------------------------------------------
 ## Install
diff --git a/TODO.md b/TODO.md
index dfdc4da..9c7dcbb 100644
--- a/TODO.md
+++ b/TODO.md
@@ -1,3 +1,5 @@
+add results tests
+
 add logger
 	- Logger interface fn arg - diff backends possible
 		- see in docs - default logger to be used
diff --git a/check.go b/check.go
index 448acc0..c2b81cc 100644
--- a/check.go
+++ b/check.go
@@ -2,20 +2,6 @@ package diffence
 
 import "io"
 
-// MatchedRules is slice of matched rules for each file in diff
-// [filepath] => Rule{rule1, rule2}
-type MatchedRules map[string][]Rule
-
-// Results is a slice of Result structs
-type Results []Result
-
-// Result compiles the results of matched rules for a diff
-type Result struct {
-	// Have any of the files matches against the rules?
-	Matched      bool
-	MatchedRules MatchedRules
-}
-
 // Checker checks diffs for rule violations
 type Checker interface {
 	Check(io.Reader) (Result, error)
diff --git a/results.go b/results.go
new file mode 100644
index 0000000..ac6ca0f
--- /dev/null
+++ b/results.go
@@ -0,0 +1,31 @@
+package diffence
+
+// Results is a slice of Result structs
+type Results []Result
+
+// Matches returns the number of diffs which had at least one file match against any rules
+func (r Results) Matches() int {
+	x := 0
+	for _, v := range r {
+		if v.Matches() > 0 {
+			x++
+		}
+	}
+	return x
+}
+
+// Result compiles the results of matched rules for a diff
+type Result struct {
+	// Have any of the files matches against the rules?
+	Matched      bool
+	MatchedRules MatchedRules
+}
+
+// Matches returns the number of files in the diff that matched against any of the rules
+func (r Result) Matches() int {
+	return len(r.MatchedRules)
+}
+
+// MatchedRules is slice of matched rules for each file in diff
+// [filepath] => Rule{rule1, rule2}
+type MatchedRules map[string][]Rule
