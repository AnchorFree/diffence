6f41b9b0a8150e165cd297ae3e00129766cf8a9b Splits Results into separate file
diff --git a/README.md b/README.md
index fc64cd8..2a21457 100644
--- a/README.md
+++ b/README.md
@@ -1,7 +1,8 @@
 # diffence
 
-Checks a git diff for offensive content.
-Golang 1.7+
+- Checks a git diff for offensive content.
+- Golang 1.7+
+- [Documentation on GoDoc](https://godoc.org/github.com/techjacker/diffence).
 
 -----------------------------------------------------------
 ## Install
diff --git a/TODO.md b/TODO.md
index dfdc4da..9c7dcbb 100644
--- a/TODO.md
+++ b/TODO.md
@@ -1,3 +1,5 @@
+add results tests
+
 add logger
 	- Logger interface fn arg - diff backends possible
 		- see in docs - default logger to be used
diff --git a/check.go b/check.go
index 448acc0..c2b81cc 100644
--- a/check.go
+++ b/check.go
@@ -2,20 +2,6 @@ package diffence
 
 import "io"
 
-// MatchedRules is slice of matched rules for each file in diff
-// [filepath] => Rule{rule1, rule2}
-type MatchedRules map[string][]Rule
-
-// Results is a slice of Result structs
-type Results []Result
-
-// Result compiles the results of matched rules for a diff
-type Result struct {
-	// Have any of the files matches against the rules?
-	Matched      bool
-	MatchedRules MatchedRules
-}
-
 // Checker checks diffs for rule violations
 type Checker interface {
 	Check(io.Reader) (Result, error)
diff --git a/results.go b/results.go
new file mode 100644
index 0000000..ac6ca0f
--- /dev/null
+++ b/results.go
@@ -0,0 +1,31 @@
+package diffence
+
+// Results is a slice of Result structs
+type Results []Result
+
+// Matches returns the number of diffs which had at least one file match against any rules
+func (r Results) Matches() int {
+	x := 0
+	for _, v := range r {
+		if v.Matches() > 0 {
+			x++
+		}
+	}
+	return x
+}
+
+// Result compiles the results of matched rules for a diff
+type Result struct {
+	// Have any of the files matches against the rules?
+	Matched      bool
+	MatchedRules MatchedRules
+}
+
+// Matches returns the number of files in the diff that matched against any of the rules
+func (r Result) Matches() int {
+	return len(r.MatchedRules)
+}
+
+// MatchedRules is slice of matched rules for each file in diff
+// [filepath] => Rule{rule1, rule2}
+type MatchedRules map[string][]Rule
50bf1cdde42823e11e78a1026e3a7cfc7bc78e2f Adds MIT License
diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..1605940
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,21 @@
+MIT License
+
+Copyright (c) 2017   
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
bf0a0c7499036872255fb6591ad57557d7ec375a Exports Rule struct
diff --git a/.realize/realize.yaml b/.realize/realize.yaml
index e53e7df..8ae2b05 100644
--- a/.realize/realize.yaml
+++ b/.realize/realize.yaml
@@ -25,7 +25,7 @@ projects:
     after: []
     paths:
     - /
-    - /cmd/diffence
+    # - /cmd/diffence
     ignore_paths:
     - bin
     - cmd
diff --git a/TODO.md b/TODO.md
index 1be69ee..dfdc4da 100644
--- a/TODO.md
+++ b/TODO.md
@@ -1,7 +1,3 @@
-** make rule public > Rule
-	- disable linter for just this file
-	- pull request to interfacer
-
 add logger
 	- Logger interface fn arg - diff backends possible
 		- see in docs - default logger to be used
@@ -25,6 +21,9 @@ write git hook integrations:
 	- yelp's pre-commit
 	- overcommit
 
+-----------------------------------------------------------
+pull request gojson lib - add description flag
+	- re-enable lint githook (disable for that file)
 
 -----------------------------------------------------------
 github integration - HTTP server
@@ -32,6 +31,14 @@ github integration - HTTP server
 
 -----------------------------------------------------------
 -----------------------------------------------------------
+config
+	- rule file locations
+		- fs
+		- http
+	- rule file for:
+		1. filepaths
+		2. added lines
+
 -----------------------------------------------------------
 -----------------------------------------------------------
 -----------------------------------------------------------
@@ -61,16 +68,6 @@ add option to add multiple rules files
 	- bufio.MultiReader
 
 -----------------------------------------------------------
-
-export rule
-	-> rename to Rule
-	- re-enable lint githook (disable for that file)
-	- pull request gojson lib - add description flag
-
------------------------------------------------------------
-
-
------------------------------------------------------------
 -----------------------------------------------------------
 Add benchmarking
 
diff --git a/check.go b/check.go
index 9c61d3e..15f0259 100644
--- a/check.go
+++ b/check.go
@@ -3,12 +3,12 @@ package diffence
 import "io"
 
 // Results is hash of results matched for each filepath in a git diff
-// [filepath] => rule{rule1, rule2}
-type Results map[string][]rule
+// [filepath] => Rule{rule1, rule2}
+type Results map[string][]Rule
 
 // CheckDiffs is a clean syntax, inefficient way of
 // finding diffs that match the supplied rules
-func CheckDiffs(r io.Reader, rules *[]rule) (Results, error) {
+func CheckDiffs(r io.Reader, rules *[]Rule) (Results, error) {
 	res := Results{}
 
 	diffs, err := SplitDiffs(r)
@@ -17,7 +17,7 @@ func CheckDiffs(r io.Reader, rules *[]rule) (Results, error) {
 	}
 
 	for _, d := range diffs {
-		res[d.filePath] = []rule{}
+		res[d.filePath] = []Rule{}
 		for _, r := range *rules {
 			if r.Match(d.filePath) {
 				res[d.filePath] = append(res[d.filePath], r)
diff --git a/check_test.go b/check_test.go
index b647ed8..0b611c3 100644
--- a/check_test.go
+++ b/check_test.go
@@ -10,7 +10,7 @@ import (
 func TestCheckDiffs(t *testing.T) {
 	type args struct {
 		r     io.Reader
-		rules *[]rule
+		rules *[]Rule
 	}
 
 	ruleSingle := getRuleFile("test/fixtures/rules/rules.json")
@@ -51,8 +51,8 @@ func TestCheckDiffs(t *testing.T) {
 				rules: ruleMulti,
 			},
 			want: Results{
-				"path/to/password.txt": []rule{(*ruleMulti)[0]},
-				"another/file/aws.pem": []rule{(*ruleMulti)[1]},
+				"path/to/password.txt": []Rule{(*ruleMulti)[0]},
+				"another/file/aws.pem": []Rule{(*ruleMulti)[1]},
 			},
 			wantErr: false,
 		},
