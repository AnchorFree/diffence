package diffence

import (
	"bufio"
	"bytes"
	"io"
	"strings"
)

const (
	diffSep = "diff --git a"
)

// SplitDiffs splits a single diff txt into an individual DiffItem for each file changed
// func SplitDiffs(r io.Reader, d *Diff) error {
func SplitDiffs(r io.Reader, l List) error {

	// increase buffer size
	scanner := bufio.NewScanner(r)
	buf := make([]byte, 0, 64*1024)    // 64kb starting token buffer size
	scanner.Buffer(buf, 1024*1024*100) // 100MB max token buffer size: https://help.github.com/articles/working-with-large-files/
	scanner.Split(ScanDiffs)

	// copy to temporary buffer because gets overwritten otherwise
	// https://golang.org/pkg/bufio/#Scanner.Bytes
	// "Bytes returns the most recent token generated by a call to Scan. The underlying array may point to data that will be OVERWRITTEN by a subsequent call to Scan. It does no allocation."
	buffer := bytes.NewBuffer(make([]byte, 0))
	BOF := true

	for scanner.Scan() {
		buffer.Write(scanner.Bytes())
		raw := buffer.String()
		// strip cruft from BOF (Beginning Of File) if necessary
		if BOF && !strings.HasPrefix(raw, diffSep) {
			BOF = false
			buffer.Reset()
			continue
		}
		l.Push(raw)
		buffer.Reset()
	}

	return scanner.Err()
}

// ScanDiffs splits on the diff of an inidividual file
func ScanDiffs(data []byte, atEOF bool) (advance int, token []byte, err error) {
	if atEOF && len(data) == 0 {
		return 0, nil, nil
	}

	k, byteIndex, diffSepEndIndex := 0, 0, 0
	dataLen := len(data) - 1
	diffSepLen := len(diffSep)

	// loop until no more bytes left to read in this chunk of data
	for k < dataLen {
		// find the next newline
		if i := bytes.IndexByte(data[k:], '\n'); i >= 0 {
			// how far advanced already (k)
			// index after last \n char (+ i)
			// start at next byte (+ 1)
			byteIndex = k + i + 1
			diffSepEndIndex = byteIndex + diffSepLen
			if diffSepEndIndex < dataLen && string(data[byteIndex:diffSepEndIndex]) == diffSep {
				return byteIndex, dropCR(data[0 : k+i]), nil
			}
			k += i + 1
		} else {
			k = dataLen
		}
	}
	// If we're at EOF, we have a final, non-terminated line. Return it.
	if atEOF {
		return len(data), dropCR(data), nil
	}
	// Request more data.
	return 0, nil, nil
}

// dropCR drops a terminal \r from the data.
func dropCR(data []byte) []byte {
	if len(data) > 0 && data[len(data)-1] == '\r' {
		return data[0 : len(data)-1]
	}
	return data
}
