package diffence

import (
	"bufio"
	"bytes"
	"io"
	"strings"
)

// DiffItem is a diff struct for an inidividual file
type DiffItem struct {
	raw      string
	filePath string
	// addedText string
	// match        bool
	// matchedRules []rule
}

// SplitDiffs splits a single diff txt into an individual DiffItem for each
// file changed
func SplitDiffs(r io.Reader) ([]DiffItem, error) {

	scanner := bufio.NewScanner(r)
	scanner.Split(ScanDiffs)

	// copy to temporary buffer because gets overwritten otherwise
	// https://golang.org/pkg/bufio/#Scanner.Bytes
	// "Bytes returns the most recent token generated by a call to Scan. The underlying array may point to data that will be OVERWRITTEN by a subsequent call to Scan. It does no allocation."
	buffer := bytes.NewBuffer(make([]byte, 0))
	items := []DiffItem{}

	for scanner.Scan() {
		buffer.Write(scanner.Bytes())
		items = append(items, DiffItem{
			raw:      buffer.String(),
			filePath: extractFilePath(buffer.String()),
		})
		buffer.Reset()
	}

	return items, scanner.Err()
}

// ScanDiffs splits on the diff of an inidividual file
func ScanDiffs(data []byte, atEOF bool) (advance int, token []byte, err error) {
	if atEOF && len(data) == 0 {
		return 0, nil, nil
	}

	k, nextFileDiffIndex, dataLen := 0, 0, len(data)-1
	for k < dataLen {
		if i := bytes.IndexByte(data[k:], '\n'); i >= 0 {
			// how far advanced already (k)
			// index after last \n char (+ i)
			// start at next byte (+ 1)
			nextFileDiffIndex = k + i + 1
			if nextFileDiffIndex < dataLen && string(data[nextFileDiffIndex]) == "d" {
				return nextFileDiffIndex, dropCR(data[0 : k+i]), nil
			}
			k += i + 1
		} else {
			k = dataLen
		}
	}
	// If we're at EOF, we have a final, non-terminated line. Return it.
	if atEOF {
		return len(data), dropCR(data), nil
	}
	// Request more data.
	return 0, nil, nil
}

func extractHeader(in string) string {
	newLineIndex := strings.Index(in, "\n")
	return in[:newLineIndex]
}

func extractFilePath(in string) string {
	prefix := "b/"
	pathBIndex := strings.Index(in, prefix)
	newLineIndex := strings.Index(in, "\n")
	return in[pathBIndex+len(prefix) : newLineIndex]
}

// dropCR drops a terminal \r from the data.
func dropCR(data []byte) []byte {
	if len(data) > 0 && data[len(data)-1] == '\r' {
		return data[0 : len(data)-1]
	}
	return data
}
