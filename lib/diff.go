package diffence

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"log"
	"os"
)

// DiffItem is a diff struct for an inidividual file
type DiffItem struct {
	raw       []byte
	filename  []byte
	addedText []byte
	// match        bool
	// matchedRules []rule
}

// NewDiffItem is a DiffItem factory
func NewDiffItem(raw []byte) DiffItem {
	return DiffItem{
		raw:       raw,
		filename:  extractFileName(raw),
		addedText: extractAddedText(raw),
	}
}

// Differ creates DiffItems from a raw git diff text input
type Differ interface {
	Parse(io.Reader) error
}

// NewDiffer is a Differ factory
func NewDiffer() Differ {
	return &diff{}
}

type diff struct {
	items []DiffItem
}

// Parse splits a diff into individual file diffs and parses each one
// in a separate go routine
func (d *diff) Parse(r io.Reader) error {

	scanner := bufio.NewScanner(r)
	scanner.Split(ScanDiffs)

	// copy to temporary buffer because gets overwritten otherwise
	// https://golang.org/pkg/bufio/#Scanner.Bytes
	// "Bytes returns the most recent token generated by a call to Scan. The underlying array may point to data that will be OVERWRITTEN by a subsequent call to Scan. It does no allocation."
	buffer := bytes.NewBuffer(make([]byte, 0))

	for scanner.Scan() {
		buffer.Write(scanner.Bytes())
		d.items = append(d.items, NewDiffItem(buffer.Bytes()))
	}

	err := scanner.Err()
	if err != nil {
		fmt.Fprintln(os.Stderr, "reading input:", err)
		log.Fatal(err)
	}
	return err
}
